pipeline{
    agent any

    tools{
        maven 'maven3'
    }

    environment{
        SONARQUBE_HOME = tool 'sonarqube-scanner'
        // This is the API key for the NVD database which is used by the OWASP Dependency-Check plugin
        // NVD_API_KEY = '3a0ef297-2370-4c66-8780-c9741bdd8010' 
    }

    stages{
        stage ('clean'){
            steps{
                cleanWs()
            }
        }
        
        stage ('clone'){
            steps{
                git 'https://github.com/VootlaSaiCharan/chatroom.git'
            }
        }

        stage ('test'){
            steps{
                sh 'mvn clean test'
            }
        }

        stage ('compile'){
            steps{
                sh 'mvn compile'
            }
        }

        stage ('trivy fs'){
            steps{
                sh 'trivy fs --format table -o fs.html .'
            }
        }

        stage ('sonarqube analysis'){
            steps{
                withSonarQubeEnv('sonarqube-server'){
                    sh ''' $SONARQUBE_HOME/bin/sonar-scanner -Dsonar.projectKey=chatroom \
                        -Dsonar.projectName=chatroom -Dsonar.java.binaries=target  '''
                }
            }
        }

        stage ('package'){
            steps{
                sh 'mvn package'
            }
        }

        stage ('OWASP File Scan'){
            steps{
                withCredentials([string(credentialsId: 'nvd-api-key', variable: 'NVD_API_KEY')]) {
                    dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit --nvdApiKey ${NVD_API_KEY}', odcInstallation: 'DP-Check'
                    dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
                }
            }
        }

        stage ('build and push to nexus'){
            steps{a
                withMaven(globalMavenSettingsConfig: 'maven-setting', jdk: '', maven: 'maven3', mavenSettingsConfig: '', traceability: true) {
                    sh 'mvn deploy'
                }
            }
        }

        stage ('run jar file'){
            steps{
                // sh 'java -jar target/chatroom-0.0.1-SNAPSHOT.jar --server.port=7000'
                sh 'cp -r target/chatroom-0.0.1-SNAPSHOT.war /usr/local/tomcat/webapps/ROOT.war'
            }
        }
    }

    post {
        always {
            script {
                // Determine color based on build status
                def color = currentBuild.currentResult == 'SUCCESS' ? 'green' : 'red'
                // Send the email
                emailext(
                    subject: "Jenkins Build Notification - ${currentBuild.fullDisplayName}",
                    body: """
                        <h2 style="color:${color};">Build Notification</h2>
                        <p><strong>Project:</strong> ${env.JOB_NAME}</p>
                        <p><strong>Build Number:</strong> ${env.BUILD_NUMBER}</p>
                        <p><strong>Status:</strong> <span style="color:${color};">${currentBuild.currentResult}</span></p>
                        <p><strong>View build:</strong> <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></p>
                    """,
                    to: 'charanv369@gmail.com',
                    from: 'jenkins@gmail.com',
                    replyTo: 'jenkins@gmail.com',
                    mimeType: 'text/html'
                )
            }
        }
    }
}   